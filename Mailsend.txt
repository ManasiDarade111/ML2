import pandas as pd
df=pd.read_csv("emails.csv")

df.head()
=df.drop(["Email No.","Prediction"],axis=1)
y=df["Prediction"]
x.shape
(5172, 3000)
y.shape
(5172,)
x.dtypes

import seaborn as sns
sns.countplot(x=y)
from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
x_scaled=scaler.fit_transform(x)
x_scaled
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x_scaled,y,random_state=0,test_size=0.25)
from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=1)

knn.fit(x_train,y_train)
y_pred=knn.predict(x_test)
from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score
print("Confusion Matrix")
print(confusion_matrix(y_test, y_pred))

print("Accuracy Score:", accuracy_score(y_test, y_pred))
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))
print("Reacal Score:", recall_score(y_test, y_pred))
print("F1 Score:", f1_score(y_test, y_pred))
print("Precision Score:",precision_score(y_test, y_pred))
from sklearn.svm import SVC
svm=SVC(kernel='poly')
svm.fit(x_train,y_train)


y_pred=svm.predict(x_test)
accuracy_score(y_test, y_pred)

from sklearn.neural_network import MLPClassifier
mlp_classifier.fit(x_train, y_train)


mlp_predictions = mlp_classifier.predict(x_test)
mlp_classifier = MLPClassifier(hidden_layer_sizes=(100, 50), max_iter=500, activation='relu', random_state=42)
mlp_accuracy = accuracy_score(y_test, mlp_predictions)
print(f'MLP Classifier Accuracy: {mlp_accuracy * 100:.2f}%')


from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score
print("Confusion Matrix")
print(confusion_matrix(y_test, y_pred))
print("Accuracy Score:", accuracy_score(y_test, y_pred))
print("Reacal Score:", recall_score(y_test, y_pred))
print("F1 Score:", f1_score(y_test, y_pred))
print("Precision Score:",precision_score(y_test, y_pred))


